Sequence - Seq :
val a=Seq(1,2,3,'a')
follows the implicit type conversion

Set :
val b=Set(1,2,3,3,3,2,'a')
set is immutable,doesnot allow redundancy
follows the implicit type conversion

Map :
val c=Map((1,"red"),(2,"white"),(3,"black"))
map is immutable
-----------------

Apply function for Seq, Set and Map

Seq - index is passed and returns the element at specified index
Set - An element in Set is passed and returns true/false according to if it is present or not
Map - Key is passed and returns the value.

Syntax - variable.apply("argument")
-----------------

Array - 
1) var a1=Array(1,2,'a',2)
follows the implicit type conversion
2) var a2=new Array[Any](3)
a2(0)=1
a2(1)='a'
a2(2)="b"
3) var a3=new Array[Any](3)
a3=Array(1,'2',"a")

Note: To print just type name of array
or a3.foreach(println)
or a3(3) to access element at index 3
a3.length  - returns length of array
----------------

Range :
var a=Array.range(2,20)
var a=Array.range(2,20,2)
var a=Array.range('a','b')
Note: Note for double it gives error as it only need int
follows the implicit type conversion

no of elements = start-end

Fill :
var b=Array.fill(4)(3)
var b=Array.fill(4)(3,4)
var b=Array.fill(4)(3,4,5)
var b=Array.fill('a')(3)
follows the implicit type conversion

ToArray :
var c=("abc").toArray
var c=("1234").toArray
---------------------

Filter, Map and Reverse

var arr1=Array.range(1,11)
var arr2=arr1.filter(_%2==0)
//arr2: Array[Int] = Array(2, 4, 6, 8, 10)

var arr3=arr1.map(_*2)
//arr3: Array[Int] = Array(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)
var arr3=arr1.map(_ %2==0)
//arr3: Array[Boolean] = Array(false, true, false, true, false, true, false, true, false, true)

var arr4=arr1.reverse
//arr4: Array[Int] = Array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1)
-----------------------

ArrayBuffer - used when we done know the no of elements or for dynamic array
import package 'import scala.collection.mutable.ArrayBuffer'

var a = ArrayBuffer[Int]() //here no of elements need not to be mentioned
var a = ArrayBuffer(1,2,3,4,5)
To add new element '+='
To delete '-=' or remove or clear methods
a+=6 adds new element 6 at end of array
a-=3 removed element 3 from array
a.remove(3)   //here 3 is index value and it remove the element present at index 3
a.clear    //removes all elements present in array
------------------------

Lists - Immutable collection
Whenever a list is updated(appended or other actions), it will not be updated but a new list is created
supports multidatatypes but follows implicit type conversion

val nums = List(1,'a',3)
var nums1 = List(1,2,'a',"abc")

var l1 = List.range(2,50)
o/p = 2,3,4........50
var l2 = List.range(50,2)
o/p=empty (no values inside the lsit)
var l1=List.fill(3)("abc")
o/p = it fills 3 times with value abc   (List(abc, abc, abc))

Lists using :: (cons)
val c1='a'::'b'::'c'::Nil
val c1='a'::"abc"::'c'::2::1.3::Nil


Appending in lists:
1)  
val c1=List(1,2,3,'a',"abc")
c1: List[Any] = List(1, 2, 3, a, abc)

val c2=c1:+'b'
c2: List[Any] = List(1, 2, 3, a, abc, b)

2)Prepending
val c3='c'::c2
c3: List[Any] = List(c, 1, 2, 3, a, abc, b)

val c4='d'+:c3
c4: List[Any] = List(d, c, 1, 2, 3, a, abc, b)
-------
val c5=c3::c4
c5: List[Any] = List(List(c, 1, 2, 3, a, abc, b), d, c, 1, 2, 3, a, abc, b)

c5.head  (1st element)
c5.tail  (all elements except 1st element)

Note = Lists are linear where vectors are indexed
-------------------------------

Vectors :
suppors multidatatypes with implicit type conversion

To create empty vector ->  val v1=Vector.empty

var v1=Vector('a','b',1,"ab")

To append :+
var v2=v1:+1

To prepend  +:
var v2=2+:v1

To concatenate 2 vectors ++
var v3=v1++v2
-------------------------

Streams :
val s1=1#::2#::3#::Stream.empty
s1: scala.collection.immutable.Stream[Int] = Stream(1, ?)
--------------------------

Functions:

sum of 2 numbers
def sum(a:Int,b:Int):Int = {a+b}
sum: (a: Int, b: Int)Int

square of a number
def sq(a:Int) = {a*a}
sq: (a: Int)Int

sum of squares
def sqsum(x:Double,y:Double)={sq(x)+sq(y)}
sqsum: (x: Double, y: Double)Double

factorial of a number
def fac(a:Int):Int={if(a==1)1 else a*fac(a-1)}
fac: (a: Int)Int
--------------------------


